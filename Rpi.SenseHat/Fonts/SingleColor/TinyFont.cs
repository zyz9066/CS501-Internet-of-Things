////////////////////////////////////////////////////////////////////////////
//
//  This file is part of Rpi.SenseHat
//
//  Copyright (c) 2017, Mattias Larsson
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy of 
//  this software and associated documentation files (the "Software"), to deal in 
//  the Software without restriction, including without limitation the rights to use, 
//  copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the 
//  Software, and to permit persons to whom the Software is furnished to do so, 
//  subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all 
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
//  INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
//  PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 
//  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION 
//  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
//  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

using System;
using System.Linq;
#if NETFX_CORE
using Windows.UI;
#else
using System.Drawing;
#endif

namespace Emmellsoft.IoT.Rpi.SenseHat.Fonts.SingleColor
{
	/// <summary>
	/// Tiny 4-pixel wide font with the following characters:
	/// 0123456789ABCDEF+-%*=.:!?/\'
	/// </summary>
	public class TinyFont
	{
		private static readonly SingleColorFont Font;

		static TinyFont()
		{
			// These bytes are calculated by the RPi.SenseHat.Tools.
			// See the method "SingleColorTinyFontWork"!
			var fontBytes = new byte[]
			{
				0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x30, 0x00, 0x00, 0x1f, 0x11, 0x1f, 0xff, 0x00, 0x31, 0x00, 0x00,
				0x12, 0x1f, 0x10, 0xff, 0x00, 0x32, 0x00, 0x00, 0x1d, 0x15, 0x17, 0xff, 0x00, 0x33, 0x00, 0x00, 0x15, 0x15, 0x1f,
				0xff, 0x00, 0x34, 0x00, 0x00, 0x07, 0x04, 0x1f, 0xff, 0x00, 0x35, 0x00, 0x00, 0x17, 0x15, 0x1d, 0xff, 0x00, 0x36,
				0x00, 0x00, 0x1f, 0x15, 0x1c, 0xff, 0x00, 0x37, 0x00, 0x00, 0x01, 0x1d, 0x07, 0xff, 0x00, 0x38, 0x00, 0x00, 0x1f,
				0x15, 0x1f, 0xff, 0x00, 0x39, 0x00, 0x00, 0x07, 0x15, 0x1f, 0xff, 0x00, 0x41, 0x00, 0x00, 0x1e, 0x05, 0x1e, 0xff,
				0x00, 0x42, 0x00, 0x00, 0x1f, 0x15, 0x0a, 0xff, 0x00, 0x43, 0x00, 0x00, 0x0e, 0x11, 0x11, 0xff, 0x00, 0x44, 0x00,
				0x00, 0x1f, 0x11, 0x0e, 0xff, 0x00, 0x45, 0x00, 0x00, 0x1f, 0x15, 0x11, 0xff, 0x00, 0x46, 0x00, 0x00, 0x1f, 0x05,
				0x01, 0xff, 0x00, 0x2b, 0x00, 0x00, 0x04, 0x0e, 0x04, 0xff, 0x00, 0x2d, 0x00, 0x00, 0x04, 0x04, 0x04, 0xff, 0x00,
				0x25, 0x00, 0x00, 0x19, 0x04, 0x13, 0xff, 0x00, 0x2a, 0x00, 0x00, 0x15, 0x0e, 0x15, 0xff, 0x00, 0x3d, 0x00, 0x00,
				0x0a, 0x0a, 0x0a, 0xff, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x10, 0x00, 0xff, 0x00, 0x3a, 0x00, 0x00, 0x00, 0x0a, 0x00,
				0xff, 0x00, 0x21, 0x00, 0x00, 0x00, 0x17, 0x00, 0xff, 0x00, 0x3f, 0x00, 0x00, 0x01, 0x15, 0x07, 0xff, 0x00, 0x2f,
				0x00, 0x00, 0x18, 0x04, 0x03, 0xff, 0x00, 0x5c, 0x00, 0x00, 0x03, 0x04, 0x18, 0xff, 0x00, 0x27, 0x00, 0x00, 0x00,
				0x03, 0x00
			};

			Font = SingleColorFont.Deserialize(fontBytes);
		}

		public void Write(ISenseHatDisplay display, string twoCharText, Color color, int offsetY = 0)
		{
			SingleColorCharacter[] chars = Font.GetChars(twoCharText).ToArray();

			if (chars.Length == 0)
			{
				return;
			}

			if (chars.Length > 2)
			{
				throw new ArgumentException("Max two characters are allowed!", nameof(twoCharText));
			}

			var characterRenderer = new SingleColorCharacterRenderer(pixelMap => color);

			int x = 0;
			foreach (SingleColorCharacter character in chars)
			{
				characterRenderer.Render(display, character, x, offsetY);

				x += 4;
			}
		}
	}
}